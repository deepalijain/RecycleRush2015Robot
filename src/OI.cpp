// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"

#include "Commands/DriveCommand.h"
#include "Commands/DriveDistanceCommand.h"
#include "Commands/ToggleFlapsCommand.h"
#include "Commands/DrivePID.h"
#include "Commands/PositionElevator.h"
#include "Commands/ToggleCompressor.h"
#include "Commands/PushTote.h"
#include "Commands/ZeroElevator.h"
#include "Commands/SwitchCamera.h"
#include "Commands/AutonomousCommand1Can1Tote.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	joystick1 = new Joystick(0);
	joystick2 = new Joystick(1);


	//applyBreakCommand = new ApplyBreakCommand();
	driveCommand = new DriveCommand();
	drive100 = new DrivePID(100.0, 100.0);
	driveDistanceCommand = new DriveDistanceCommand(12*1);
	toggleArmFlap = new ToggleFlapsCommand(0);
	armsUp = new ToggleFlapsCommand(-1);
	armsDown = new ToggleFlapsCommand(1);
	toggleCompressor = new ToggleCompressor();
	pushTote = new PushTote();
	switchCamera = new SwitchCamera();
	turnLeft = new DrivePID(-ninetyDegreeTurn, ninetyDegreeTurn);
	turnRight = new DrivePID(ninetyDegreeTurn, -ninetyDegreeTurn);

	toteUp = new PositionElevator(1, false);				// Tote Up
	toteDown = new PositionElevator(-1, false);				// Tote Down
	canUp = new PositionElevator(1, true);					// Can Up
	canDown = new PositionElevator(-1, true);				// Can Down

	Joystick1WhenPressed(toteUp, 6);			// Right bumper
	Joystick1WhenPressed(toteDown, 5);			// Left bumper
	Joystick1WhenPressed(canUp, 4);				// Y button
	Joystick1WhenPressed(canDown, 1);			// A button

	Joystick1WhenPressed(armsUp, 2);			// B button (close, narrow arms)
	Joystick1WhenPressed(armsDown, 3);			// X button (open, widen arms)
	Joystick1WhenPressed(toggleCompressor, 7);	// tiny back button (old XBox)
	Joystick1WhenPressed(pushTote, 8);			// tiny start button

	// these next two commands are only for testing
	/* Joystick2WhenPressed(switchCamera, 11);			// upper right button on Logitech Attack 3
	Joystick2WhenPressed(drive100, 6);			    // upper left button on Logitech Attack 3
	Joystick2WhenPressed(turnLeft, 8);
	Joystick2WhenPressed(turnRight, 9);*/
	// Since this is a commandGroup, can't use Charles' methods
}

void OI::Joystick1WhenPressed(Command *command, int buttonNum) {
	// Truthfully, we don't really need to remember these pointers.
	// Once we assigned WhenPressed, we could throw them away
	joystick1Buttons[buttonNum] = new JoystickButton(joystick1, buttonNum);
	joystick1Buttons[buttonNum]->WhenPressed(command);
}

void OI::Joystick2WhenPressed(Command *command, int buttonNum) {
	joystick2Buttons[buttonNum] = new JoystickButton(joystick2, buttonNum);
	joystick2Buttons[buttonNum]->WhenPressed(command);
}

Joystick* OI::getJoystick2() {
	return joystick2;
}

Joystick* OI::getJoystick1() {
	return joystick1;
}
