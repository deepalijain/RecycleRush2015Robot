// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveSubsystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveCommand.h"
#include "Parameters.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

DriveSubsystem::DriveSubsystem() : Subsystem("DriveSubsystem") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	lFront = RobotMap::driveFrontLeft;
	rFront = RobotMap::driveFrontRight;
	robotDrive = RobotMap::driveSubsystem;
	backLeftMotor = RobotMap::driveBackLeft;
	backRightMotor = RobotMap::driveBackRight;

	RobotMap::driveBackLeft->SetPosition(0.0);
	RobotMap::driveBackLeft->SetFeedbackDevice(CANTalon::QuadEncoder);
	//if (RobotMap::testBot) RobotMap::driveBackLeft->SetSensorDirection(false);
	//RobotMap::driveBackLeft->SetCloseLoopRampRate(.05);

	RobotMap::driveBackRight->SetPosition(0.0);
	RobotMap::driveBackRight->SetFeedbackDevice(CANTalon::QuadEncoder);
	//if (RobotMap::testBot) RobotMap::driveBackRight->SetSensorDirection(false);
	//RobotMap::driveBackRight->SetCloseLoopRampRate(.05);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void DriveSubsystem::SetPIDDistance(double left, double right)
{
	RobotMap::driveBackLeft->SetControlMode(CANSpeedController::kPosition);
	RobotMap::driveBackLeft->SetPID(Parameters::driveP,Parameters::driveI,
									Parameters::driveD,Parameters::driveF);
	RobotMap::driveBackLeft->ClearIaccum();

	printf("PID Left params distance=%1.2f, driveP=%1.3f, driveI=%1.3f, driveD=%1.3f, driveF=%1.3f.\n",
			-left, Parameters::driveP, Parameters::driveI, Parameters::driveD, Parameters::driveF);

	RobotMap::driveBackRight->SetControlMode(CANSpeedController::kPosition);
	RobotMap::driveBackRight->SetPID(Parameters::driveP,Parameters::driveI,
									 Parameters::driveD,Parameters::driveF);
	RobotMap::driveBackRight->ClearIaccum();

	printf("PID Right params distance=%1.2f, driveP=%1.3f, driveI=%1.3f, driveD=%1.3f, driveF=%1.3f.\n",
			right, Parameters::driveP, Parameters::driveI, Parameters::driveD, Parameters::driveF);

	RobotMap::driveBackLeft->Set(-left);
	RobotMap::driveBackRight->Set(right);

}

void DriveSubsystem::DriveJoysticks(double y, double x)
{
	robotDrive->ArcadeDrive(y,x);
}

void DriveSubsystem::InitDefaultCommand() {
	SetDefaultCommand(Robot::driveCommand);
}

double DriveSubsystem::GetLeftEncoderPosition() {
	return ((CANTalon*) backLeftMotor)->GetPosition();
}

double DriveSubsystem::GetRightEncoderPosition() {
	return ((CANTalon*) backRightMotor)->GetPosition();
}

double DriveSubsystem::LeftTalonGet() {
	return ((CANTalon*) backLeftMotor)->Get();
}

double DriveSubsystem::RightTalonGet() {
	return ((CANTalon*) backRightMotor)->Get();
}


