// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ROBOTMAP_H
#define ROBOTMAP_H
#include "WPILib.h"
#include "Subsystems/CANTalons.h"
#include "ctre/CanTalonSRX.h"

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
class RobotMap {
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static CANTalon* driveFrontLeft;
	static CANTalon* driveFrontRight;
	static RobotDrive* driveSubsystem;
	static CANTalon* driveBackLeft;
	static CANTalon* driveBackRight;
	static Encoder* driveLeftEncoder;
	static Encoder* driveRightEncoder;
	static CANTalon* elevatorMotor1;
	// Need to use CanTalonSRX for pickupMotor2 so we can invert the following Talon
	// See Software Reference Manual 21.15
	static CanTalonSRX* elevatorMotor2;
	static Encoder* pickupSubsystempickupEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static CANTalons* Ct;

	// Double solenoids
	static DoubleSolenoid* armFlapSolenoid;
	static DoubleSolenoid* shifterSolenoid;
	static DoubleSolenoid* totePusherSolenoid;

	static bool testBot;

	// Some values that are needed in different commands or subsystems but are different
	// for testBot vs. competition bot
	static double ticksPerRotation;
	static double wheelDiameter;
	static double inchesPerRotation;
	static double ticksPerInch;
	static double inchesPerTick;
	static double robotWidth;
	static double ninetyDegreeTurn;

	static void init();
};
#endif
