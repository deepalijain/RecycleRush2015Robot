// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PickupPIDCommand.h"
#include "../Robot.h"

PickupPIDCommand::PickupPIDCommand(int _ticks) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pickupSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void PickupPIDCommand::Initialize() {
	firstTime=true;
	SetTimeout(15000);  // set 15 second timeout. Good enough?
	double p = 0.001;
	double i = 0.0;
	double d = 0.0;
	double f = 0.0;

    RobotMap::driveFrontLeft->SetControlMode(CANSpeedController::kPosition);
    RobotMap::driveFrontLeft->SetPID(p,i,d);
    RobotMap::driveFrontLeft->SetF(f);
    RobotMap::driveFrontLeft->ClearIaccum();
    RobotMap::driveFrontLeft->SetPosition(0.0);
    RobotMap::driveFrontLeft->SetFeedbackDevice(CANTalon::QuadEncoder);
    RobotMap::driveFrontLeft->SetSensorDirection(true);

}

// Called repeatedly when this Command is scheduled to run
void PickupPIDCommand::Execute() {

}

// Make this return true when this Command no longer needs to run execute()
bool PickupPIDCommand::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void PickupPIDCommand::End() {
	Robot::pickupSubsystem->pickupMotor1->Set(0);
	//comment ((PickupDriveCommand *)Robot::pickupDriveCommand)->Start();
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PickupPIDCommand::Interrupted() {

}
