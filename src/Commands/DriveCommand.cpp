// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveCommand.h"
#include "../Robot.h"

DriveCommand::DriveCommand() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void DriveCommand::Initialize() {
	RobotMap::driveBackLeft->SetControlMode(CANSpeedController::kPercentVbus);
	RobotMap::driveBackRight->SetControlMode(CANSpeedController::kPercentVbus);
	turnMax = 0.7;
}

// Called repeatedly when this Command is scheduled to run
void DriveCommand::Execute() {
	float y = Robot::oi->joystick1->GetY();
	// Note that the sense of Y is negative, That is, if one pushes the joystick forward, Y is negative.
	// So a negative y value means we want to drive forward.
	// The ArcadeDrive method seems to expect this.

	float x = Robot::oi->joystick1->GetRawAxis(4);
	if (x > turnMax){
		x = turnMax;
	}
	if (x < -turnMax){
		x = -turnMax;
	}
	Robot::driveSubsystem->DriveJoysticks(y,x);
	SmartDashboard::PutNumber("Drive Command Y", y);
	SmartDashboard::PutNumber("Drive Command X", x);

	
}

// Make this return true when this Command no longer needs to run execute()
bool DriveCommand::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void DriveCommand::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveCommand::Interrupted() {

}
