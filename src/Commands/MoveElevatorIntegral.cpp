// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MoveElevatorIntegral.h"

// These parameters should be adjustable at runtime
double MoveElevatorIntegral::wheelDiameter = 2.0; // starting guess
double MoveElevatorIntegral::elevatorSpeed = 0.25;

// these aren't
double MoveElevatorIntegral::ticksPerRotation = 1024.0;
double MoveElevatorIntegral::inchesPerTote = 12.1;
double MoveElevatorIntegral::inchesPerRotation = wheelDiameter * 3.14159;
double MoveElevatorIntegral::ticksPerInch = ticksPerRotation / inchesPerRotation;
double MoveElevatorIntegral::ticksPerTote = ticksPerInch * inchesPerTote;
double MoveElevatorIntegral::m_curPos = 0.0;
double MoveElevatorIntegral::m_startPos = 0.0;
double MoveElevatorIntegral::m_targetPos = 0.0;



MoveElevatorIntegral::MoveElevatorIntegral(int n) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator);
	m_n = n;
	MoveElevatorUpdateParams(2.0);
	printf("MoveElevatorIntegral constructed for n=%d\n", (int)m_n);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

 void  MoveElevatorIntegral::MoveElevatorUpdateParams(double wheelDiam) {
	wheelDiameter = wheelDiam;
	inchesPerRotation = wheelDiameter * 3.14159;
	ticksPerInch = ticksPerRotation / inchesPerRotation;
	ticksPerTote = ticksPerInch * inchesPerTote;
}

// Called just before this Command runs the first time
void MoveElevatorIntegral::Initialize() {
	firstTime=true;
	printf("MoveElevatorIntegral initialized for n=%d\n", (int)m_n);
}

// Called repeatedly when this Command is scheduled to run
void MoveElevatorIntegral::Execute() {
	if (firstTime) {
		m_startPos = m_curPos = Robot::elevator->GetEncoderPosition();
		m_targetPos = (m_n * ticksPerTote) + m_startPos;
		firstTime = false;
		ticks = 0;
		printf("MoveElevatorIntegral - Direction: %d, Start Pos: %f, Target Pos: %f\n",
				(int)m_n, m_startPos, m_targetPos);
	}
	Robot::elevator->elevatorMotor1->Set(m_n > 0.0 ? elevatorSpeed : -elevatorSpeed);
}

// Make this return true when this Command no longer needs to run execute()
bool MoveElevatorIntegral::IsFinished() {
	m_curPos = Robot::elevator->GetEncoderPosition();
	SmartDashboard::PutNumber("Elevator Encoder Position", m_curPos);
	SmartDashboard::PutNumber("Elevator target ticks:", m_targetPos);
	SmartDashboard::PutNumber("Elevator start ticks:", m_startPos);
	// encoder positions are always negative, which is why the test
	// below is <= not =>. Also note the 2.5 second timeout
	return ((m_n < 0 ? m_targetPos >= m_curPos : m_targetPos<= m_curPos) || ++ticks>100);
}

// Called once after isFinished returns true
void MoveElevatorIntegral::End() {
	Robot::elevator->elevatorMotor1->Set(0.0);
	((DriveElevator *)Robot::driveElevatorCommand)->Start();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveElevatorIntegral::Interrupted() {

}
