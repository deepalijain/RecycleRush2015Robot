// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ZeroElevator.h"

ZeroElevator::ZeroElevator() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void ZeroElevator::Initialize() {
	printf("Begin ZeroElevator, starting encoder value = %1.2f.\n", Robot::elevator->GetPosition());
	if (!RobotMap::testBot) RobotMap::elevatorMotor1->SetControlMode(CANSpeedController::kPercentVbus);
}

// Called repeatedly when this Command is scheduled to run
void ZeroElevator::Execute() {
	// our robot is currently wired so negative is up and positive is down
	if (!(Robot::elevator->IsAtTop() || Robot::elevator->IsAtBottom())) {
		if (RobotMap::testBot) {
			Robot::elevator->Move(50);
		}
		else {
			// elevatorMotor1 is upside down and not invertable, not being a drive,
			// so we simply take the negative of what would be expected here
			Robot::elevator->elevatorMotor1->Set(0.3);
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ZeroElevator::IsFinished() {
	return (Robot::elevator->IsAtTop() || Robot::elevator->IsAtBottom());
}

// Called once after isFinished returns true
void ZeroElevator::End() {
	double position = Robot::elevator->GetPosition();
	printf("Zero elevator ended at position %1.2f due to %s\n",
			position,
			Robot::elevator->IsAtBottom() ? "At Bottom" : "At Top");
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ZeroElevator::Interrupted() {

}
