// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <algorithm>
#include "DriveDistanceCommand.h"

DriveDistanceCommand::DriveDistanceCommand(int inches, int r, int l) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	distance = inches;
	right = r;
	left = l;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void DriveDistanceCommand::Initialize() {
	// reset the encoders to 0
	RobotMap::driveBackLeft->SetPosition(0);
	distanceTravelledL = 0.0;
	RobotMap::driveBackRight->SetPosition(0);
	distanceTravelledR = 0.0;
}

// Called repeatedly when this Command is scheduled to run
void DriveDistanceCommand::Execute() {
	// If we're farther away than 1 foot then speed up to max
	distanceTravelledL = inchesPerTick * RobotMap::driveBackLeft->GetEncPosition();
	distanceTravelledR = right * inchesPerTick * RobotMap::driveBackRight->GetEncPosition();
	if (distance - distanceTravelledL > 12)
	{
		voltageLeft = std::min(voltageLeft + voltageStep, maxVoltage);
	}
	else
		// We're getting close so slow down
	{
		voltageLeft = std::max(voltageLeft - voltageStep, float(0.0));
	}
	// Now let's check to see how far each side has traveled
	// and scale the right side accordingly
	distanceError = distanceTravelledL - distanceTravelledR;

	voltageRight = right * (voltageLeft + distanceError * voltageScale);

	Robot::driveSubsystem->robotDrive->TankDrive(voltageLeft,voltageRight,true);
}

// Make this return true when this Command no longer needs to run execute()
bool DriveDistanceCommand::IsFinished() {
	// Command will be finished when we get to within
	// 1 inch of commanded position
	return fabs(distanceTravelledL - distance) < 1.0;
}

// Called once after isFinished returns true
void DriveDistanceCommand::End() {
	Robot::driveSubsystem->robotDrive->ArcadeDrive(0, 0, true);
	//if(Robot::isAuto==false){
		((DriveCommand *)Robot::driveCommand)->Start();
	//}


}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveDistanceCommand::Interrupted() {

}
