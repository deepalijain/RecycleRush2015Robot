// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RightOnly.h"

#include <algorithm>
#include "../Subsystems/Parameters.h"

RightOnly::RightOnly(double inches) : m_inches(inches) {
	m_driveSubsystem = Robot::driveSubsystem;
}

// Called just before this Command runs the first time
void RightOnly::Initialize() {
	SetInterruptible(false);
	m_startPosition = RobotMap::driveBackRight->GetPosition();
	printf("Right Only initialized for %1.2f inches.\n", m_inches);
	// Disable the voltage ramp rate
	RobotMap::driveBackLeft->SetVoltageRampRate(0.0);
	RobotMap::driveBackRight->SetVoltageRampRate(0.0);
}

// Called repeatedly when this Command is scheduled to run
void RightOnly::Execute() {
	// For right side, positive is forward
	double percentVbus = ((m_inches <= 0) ? 0.4 : -0.4);
	m_driveSubsystem->robotDrive->TankDrive(0.0, percentVbus, false);
}

// Make this return true when this Command no longer needs to run execute()
bool RightOnly::IsFinished() {
	double ticksTraveled = RobotMap::driveBackRight->GetPosition() - m_startPosition;
	if (Robot::Ticks%2) printf("RightOnly: ticksTraveled = %1.0f, inches traveled = %1.2f, inches to travel = %1.2f, done = %d.\n",
			ticksTraveled, fabs(ticksTraveled)*RobotMap::inchesPerTick , m_inches, fabs(ticksTraveled)*RobotMap::inchesPerTick > fabs(m_inches));
	return fabs(ticksTraveled)*RobotMap::inchesPerTick > fabs(m_inches);
}

// Called once after isFinished returns true
void RightOnly::End() {
	m_driveSubsystem->robotDrive->ArcadeDrive(0, 0, true);
	// Set the voltage ramp rate for both drive motors
	RobotMap::driveBackLeft->SetVoltageRampRate(Parameters::driveRampRate);
	RobotMap::driveBackRight->SetVoltageRampRate(Parameters::driveRampRate);

	// Can't do this and expect to be part of a command group
	//((DriveCommand *)Robot::driveCommand)->Start();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void RightOnly::Interrupted() {
	printf("RightOnly INTERRUPTED at %d\n", Robot::Ticks);
}
