// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DrivePID.h"

DrivePid::DrivePid(int _ticks) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSubsystem);
	ticks = _ticks;
	currentTime=0;
	isFinished=false;
}

// Called just before this Command runs the first time
void DrivePid::Initialize() {
	firstTime=true;
	SetTimeout(15000);  // set 15 second timeout. Good enough?
	double p = 10.0;
	double i = 0.1;
	double d = 50.0;
	double f = 0.0;

	//SO MANY API CALLS AAAAARGH
    RobotMap::driveFrontLeft->SetControlMode(CANSpeedController::kPosition);
    RobotMap::driveFrontLeft->SetPID(p,i,d);
    RobotMap::driveFrontLeft->SetF(f);
    RobotMap::driveFrontLeft->ClearIaccum();
    RobotMap::driveFrontLeft->SetPosition(0.0);
    RobotMap::driveFrontLeft->SetFeedbackDevice(CANTalon::QuadEncoder);
    RobotMap::driveFrontLeft->SetSensorDirection(true);
    //RobotMap::driveFrontLeft->

    RobotMap::driveFrontRight->SetControlMode(CANSpeedController::kPosition);
    RobotMap::driveFrontRight->SetPID(p,i,d);
    RobotMap::driveFrontRight->SetF(f);
    RobotMap::driveFrontRight->ClearIaccum();
    RobotMap::driveFrontRight->SetPosition(0.0);
    RobotMap::driveFrontRight->SetFeedbackDevice(CANTalon::QuadEncoder);
    RobotMap::driveFrontRight->SetSensorDirection(true);
    //RobotMap::driveFrontRight->
}

// Called repeatedly when this Command is scheduled to run
void DrivePid::Execute(){

	if (firstTime){
		Initialize();
		firstTime=false;
	}
	RobotMap::driveFrontRight->SetControlMode(CANSpeedController::kFollower);
	RobotMap::driveFrontRight->Set(4);
	RobotMap::driveFrontRight->EnableControl();
	RobotMap::driveFrontLeft->Set(-ticks);
//	RobotMap::driveFrontRight->Set(ticks);

	SmartDashboard::PutNumber("PID Initial Ticks", ticks);

	double currPos = -(RobotMap::driveFrontLeft->GetEncPosition());
	double toGo = ticks-currPos;
	double currPosR = -(RobotMap::driveFrontRight->GetEncPosition());
//	if(fabs(toGo) < 0.02) isFinished=true;
	SmartDashboard::PutNumber("Drive PID", currPos);
	SmartDashboard::PutNumber("Drive PID r", currPosR);

	printf("Executing DrivePid!");
}

// Make this return true when this Command no longer needs to run execute()
bool DrivePid::IsFinished() {
	return isFinished;
}

// Called once after isFinished returns true
void DrivePid::End() {
	Robot::driveSubsystem->robotDrive->ArcadeDrive(0, 0, true);
	((DriveCommand *)Robot::driveCommand)->Start();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DrivePid::Interrupted() {
	End();
}
